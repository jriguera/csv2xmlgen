#summary How it works
#labels Phase-Implementation,Phase-Design,development

= Introduction =

The program *csv2xmlgen* is a XML generator based on the template system developed in the
*xmltemplate.py* module. This module can be considered the core of the program.

== Details ==

The module contains a class which generates XML documents based on a template source (file, string, ...) setting the part of XML template which will be cloned and repeated on each input data. Clue: [http://blog.ianbicking.org/templating-via-dict-wrappers.html]

=== Implementation ===

Here your are the core. The  class *`TemplateDict`* inherits from python class *`dict`* and redefines *`__getitem__`* method whose is used by the string operator *`%`* (python string template operator). The rest of code is working with XML documents using *minidom* and "csv" modules.

You can see the full source code in _Source_ section.

{{{
# ##########################
# XMLTemplate implementation
# ##########################

class XMLTemplate:
    """Base class for XML Templates

    Generates a XML DOM document that is based on a template source (file, string ...) 
    filled with external data. Appends selected new xml elements with external data.
    Into xml template, it changes all keys with the format $(key|defautlvalue)s into 
    the data of "key" from the dictionary, or "defaultvalue" if key is not found in 
    dictionary.
    
    Public Attibutes:

        :param sizeLimit: = 1024 -> (bytes) max size of template source.
        :param separatorKey: = "|" -> separator for default key values.
        :param separatorXml: = "." -> separator to indicates repeateable elements.
        :param defaultValue: = "NULL" -> default value for keys without default values.
    """
    sizeLimit = 1048576 
    separatorKey = "|"
    separatorXml = "."
    defaultValue = "NULL"


    class TemplateDict(dict):
        """Class for string templates with dictionaries and operator %

        This class inherits all attributes, methods, ... from dict and redefines "__getitem__"
        to returns default values when an element is searched with "key<separator>defaultvalue" 
        if "key" is not found, then "defaultvalue" will be returned. It is like an OR: 
        returns value or "defaultvalue". There is a global default value for normal keys.
        """
        def __getitem__(self, key):
            try:
                k, default = key.split(XMLTemplate.separatorKey, 1)
            except ValueError:
                k = key.split(XMLTemplate.separatorKey, 1)[0]
                default = XMLTemplate.defaultValue
            return self.get(k, default)

# [...]
}}}